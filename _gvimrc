""""""""""""""""""""""""""""""""""""""""""""""""""""" 
"
"  \  /
"   \/   |--  |    |
"   /\   |--  |    |
"  /  \  |--  |--  |--
"
" Maintainer: Xell Liu <xell DOT liu AT gmail.com>
" Note: For use font with Chinese name in Windows,
"       this file must be cp936 encoding.


" Popup confirmation window
set confirm

" Don't hide mouse, or the cursor will flash in the title
"set nomousehide

" Transparency only for MacVim GUI
if &term == 'builtin_gui'
    set transparency=4
endif

" Set colorscheme {{{1
"let g:zenburn_high_Contrast = 1
"let g:zenburn_color_also_Ignore = 1
"colorscheme zenburn
"colorscheme xell
" }}}

" Guioptions {{{1
" e gui tabs
" g grey the inactive menu items 
" t include tearoff menu items
" a auto yank visuals into regester *
" T toolbar
set guioptions=egtm
"}}}

" Screen size settings {{{1
" Initial sizes {{{2
" those size responding to font h:9
set lines=40
set columns=101
" }}}

" Change the window size incrementally {{{2
let g:increments = 3
function! ChangeWindowSizeV(incre, direction)
    let y = &lines
    let x = &columns
    if a:direction =~ "down"
        let y += a:incre
        execute 'set lines=' . y
    elseif a:direction =~ "up"
        let y -= a:incre
        execute 'set lines=' . y
    elseif a:direction =~ "left"
        let x -= a:incre
        execute 'set columns=' . x
    elseif a:direction =~ "right"
        let x += a:incre
        execute 'set columns=' . x
    endif
    "execute 'set lines=' . x
endfunction
nmap <C-A-Down> :call ChangeWindowSizeV(g:increments, "down")<CR>
nmap <C-A-Up> :call ChangeWindowSizeV(g:increments, "up")<CR>
nmap <C-A-Left> :call ChangeWindowSizeV(g:increments, "left")<CR>
nmap <C-A-Right> :call ChangeWindowSizeV(g:increments, "right")<CR>
" }}}

" Toggle between two sets of window sizes F1 F2 {{{2
" toggle between two window size, see F1
nmap <silent> <F1> :call <SID>sizeAndPositionOfWindowSmall()<CR>
nmap <silent> <F2> :call <SID>sizeAndPositionOfWindow()<CR>
if !exists("s:sizeandpositionofwindow")
    let s:sizeandpositionofwindowsmall = 0
endif
function! s:sizeAndPositionOfWindowSmall()
    if !s:sizeandpositionofwindowsmall
        set lines=9
        set columns=101
        "winpos 50 60
        let s:sizeandpositionofwindowsmall = !s:sizeandpositionofwindowsmall
    else
        set lines=40
        set columns=101
        "winpos 66 103
        let s:sizeandpositionofwindowsmall = !s:sizeandpositionofwindowsmall
    endif
endfunction

" toggle between two window size, see F2
if !exists("s:sizeandpositionofwindow")
    let s:sizeandpositionofwindow = 0
endif
function! s:sizeAndPositionOfWindow()
    if s:sizeandpositionofwindow
        set lines=40
        set columns=169
        "winpos 50 60
        let s:sizeandpositionofwindow = !s:sizeandpositionofwindow
    else
        set lines=68
        set columns=259
        "winpos 66 103
        let s:sizeandpositionofwindow = !s:sizeandpositionofwindow
    endif
endfunction
" }}}
" }}}

" Set the guitablabel {{{1
set guitablabel=%{GuiTabLabel()}
" see :h tabpage
function! GuiTabLabel()
    let label = ''
    let bufnrlist = tabpagebuflist(v:lnum)

    let label .= tabpagenr().'_'

    " Add '+' if one of the buffers in the tab page is modified
    for bufnr in bufnrlist
        if getbufvar(bufnr, "&modified")
            let label .= '+'
            break
        endif
    endfor

    " Append the number of windows in the tab page if more than one
    "" let wincount = tabpagewinnr(v:lnum, '$')
    "" if wincount > 1
    ""   let label .= wincount
    "" endif
    "" if label != ''
    ""   let label .= ' '
    "" endif

    " Append the buffer name
    return label . bufname(bufnrlist[tabpagewinnr(v:lnum) - 1])
endfunction
" }}}

" Font setup {{{1
"---------------------------------------
" TODO
set linespace=4
set guifont=Consolas:h15
" useless {{{2
"set guifont=Menlo_Regular:h14
"set guifont=YaHei_Consolas_Hybrid:h14
"set guifont=Input:h14
"set guifont=Megatops_ProCoder_1.0:h12
"set guifont=Andale_Mono:h12
"set guifont=Courier\ New:h14
"set guifont=DejaVu_LGC_Sans_Mono:h13
"set guifont=Monaco:h13
"set guifont=WenQuanYi\ Micro\ Hei\ Mono
"
" guifontwide will disable the function of changing font size in Edit
"set guifontwide=Yahei_Mono:h14
"set guifontwide=Microsoft\ YaHei:h14
"set guifontwide=Source\ Han\ Sans\ CN\ ExtraLight:h14
"set guifontwide=TextMate
"set guifontwide=Arial\ Unicode MS
"set guifontwide=Heiti\ SC
"set guifontwide=STHeiti:h14
"set guifontwide=Megatops_ProCoder_1.0:h12 
"}}}

" }}}

" Xell Fullscreen and Writeroom {{{1
" TODO refine the code
let g:Fullscreen_Enabled = 0
let g:writeroomstarted = 0

nmap <silent> <F11> <Esc>:if !g:writeroomstarted \| call FullScreenToggle() \| else \| echo "WriteRoom mode. Please end it." \| endif<CR>
command! -nargs=0 WRS call WriteRoomStart()
command! -nargs=0 WRSNew call WriteRoomStart('new')
command! -nargs=0 WRE call WriteRoomEnd()
" }}}

" GUI menu {{{1

" Don't close the last tab with D-w {{{2
macm File.Close key=<nop>
nnoremap <silent> <D-w> <Esc>:tabclose<CR>
" }}}

" Temp Note(file) Saving {{{2
" As for :macm, must use in has("gui_macvim")
macm File.Save<Tab>:w key=<Nop>
nmap <D-s> :call TempNote()<CR>
imap <D-s> <Esc><D-s>a

macm Edit.Paste<Tab>"+gP key=<Nop>
" imap <D-v> <Esc>"+gpa
" nmap <D-v> "+gp

macm Edit.Find.Use\ Selection\ for\ Find  key=<Nop>
" }}}

" Find General {{{2
macm Edit.Find.Find\.\.\. key=<Nop>
nmap <D-f> :call <SID>find_general()<CR>

" Default -i; include only this filetype; no exclude TODO
function! s:find_general()
    let pattern = input('What to find: ')
    if pattern == ''
        call xelltoolkit#echo_msg('Empty inquery!')
        return
    endif

    let option = input('Ignore case? (Y/n)')


    if expand('%:p:h') =~? xelltoolkit#fname2pattern(g:xell_notes_root)
        let include = 'note'
    else
        let include = input('This filetype? (Y/n)')
        if include == ''
            let include = expand('%:e')
        else
            let include = ''
        endif
    endif

    call xelltoolkit#grep_in_lcd_r(option, include, pattern)

    cwindow

    if &ft == 'qf'
        exec 'match ErrorMsg /\c' . pattern . '/'
    endif
endfunction
" }}}

" }}}

" Modelines {{{1
" vim:fmr={{{,}}}:fdm=marker:foldcolumn=3:lbr:fileencoding=utf-8:ff=unix
